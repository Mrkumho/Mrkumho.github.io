## 1. 쿠버네티스 리소스 관리 개요

- **노드와 파드**: 각 노드는 CPU, 메모리 등 리소스를 보유하며, 파드는 실행을 위해 리소스를 요청.
- **스케줄러 역할**: 파드가 생성될 때, 스케줄러는 파드의 리소스 요청과 노드의 가용 리소스를 고려해 적합한 노드에 배치.
- **리소스 부족 시**: 노드에 충분한 리소스가 없으면 파드는 Pending 상태로 대기하며, `kubectl describe pod`로 확인 가능.

## 2. 리소스 요청(request)과 한계(limit)

- **requests**: 파드가 실행되기 위해 필요한 최소 리소스(CPU, 메모리).
  - 예시: `cpu: 1`, `memory: 1Gi`
- **limits**: 파드가 사용할 수 있는 최대 리소스(CPU, 메모리).
  - 예시: `cpu: 2`, `memory: 2Gi`
- **실제 동작**
  - **CPU**: 한계를 초과하면 CPU 사용이 제한(throttling).
  - **메모리**: 한계를 초과하면 컨테이너가 종료(OOM kill).

## 3. 리소스 단위 및 표기법

- **CPU**
  - `1` = 1 vCPU (AWS), 1 core (GCP/Azure), 1 하이퍼스레드(기타)
  - `0.1` = 100m (milli CPU), 최소 1m (0.001 CPU)
- **메모리**
  - `Gi` = gibibyte (1,024 MiB), `Mi` = mebibyte
  - `G` = gigabyte (1,000 MB), `M` = megabyte
  - **주의:** `Gi`와 `G`, `Mi`와 `M`은 다름.

## 4. 리소스 관리 시나리오

- **기본값 없음**: 리소스 requests/limit이 없으면 파드가 노드의 모든 리소스를 사용할 수 있음(위험).
- **requests만 설정**: 파드는 requests만큼의 리소스를 보장받지만, 추가 리소스 사용 가능(가장 이상적).
- **limit만 설정**: requests가 한계와 동일하게 설정됨(파드가 limit만큼만 사용 가능).
- **requests과 limit 모두 설정**: 파드는 requests만큼 보장받고, limit까지 사용 가능(유연성 떨어질 수 있음).

## 5. LimitRange와 ResourceQuota

- **LimitRange**
  - 네임스페이스 내 컨테이너별 리소스 요청/한계의 최소/최대/기본값 설정.
  - 예시: 최소 CPU 100m, 최대 CPU 1, 기본 메모리 200Mi 등.
  - 새로 생성되는 파드에만 적용됨.
- **ResourceQuota**
  - 네임스페이스 전체의 리소스 사용량(요청/한계) 제한.
  - 예시: 전체 CPU 요청 4, 메모리 요청 4Gi, 한계 10/10Gi 등.

## 6. 요약 및 권장 사례

- **모든 파드에 리소스 requests을 설정**: 리소스 보장 및 클러스터 안정성 확보.
- **필요시 Limit 설정**: 과도한 리소스 사용 방지.
- **LimitRange와 ResourceQuota 활용**: 네임스페이스 단위로 리소스 관리.
- **실제 사용량 모니터링**: 요청/한계를 지속적으로 최적화.

---

> **핵심:**  
> 쿠버네티스에서 리소스 요청과 한계를 적절히 설정하면, 파드의 안정적 실행과 클러스터의 효율적 운영이 가능.  
> LimitRange와 ResourceQuota를 활용해 네임스페이스 단위로 리소스를 제한 가능.
